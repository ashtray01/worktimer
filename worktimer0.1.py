import os
import time
import datetime
import sys
from openpyxl import Workbook
from colorama import init, Fore, Style

init()

# –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))

today = datetime.date.today().strftime("%Y-%m-%d")
log_txt_path = os.path.join(SCRIPT_DIR, f"{today}.txt")
log_xlsx_path = os.path.join(SCRIPT_DIR, f"{today}.xlsx")

session_log = []
start_time = None
log_start_time = None
last_action_time = None
total_seconds = 0
current_task = None

def format_timer(seconds):
    return str(datetime.timedelta(seconds=int(seconds)))

def format_totals(seconds):
    minutes = seconds / 60
    hours = seconds / 3600
    return f"{int(minutes)} –º–∏–Ω / {hours:.2f} —á"

def recover_from_log():
    global session_log, last_action_time, total_seconds, current_task, log_start_time
    if os.path.exists(log_txt_path):
        with open(log_txt_path, "r", encoding="utf-8") as f:
            lines = f.readlines()
            for i, line in enumerate(lines):
                try:
                    timestamp = line[line.find("[")+1:line.find("]")]
                    task = line[line.find("]")+2:line.rfind("|")].strip() if "|" in line else line[line.find("]")+2:].strip()
                    seconds = int(line[line.rfind("|")+1:line.rfind("—Å–µ–∫")].strip()) if "—Å–µ–∫" in line else 0
                    if i == 0 and log_start_time is None:  # –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞—á–∞–ª–æ –ª–æ–≥–∞
                        log_start_time = datetime.datetime.strptime(f"{today} {timestamp}", "%Y-%m-%d %H:%M:%S").timestamp()
                    if task != "–ù–∞—á–∞–ª–æ –¥–Ω—è":
                        session_log.append((timestamp, task, seconds))
                        total_seconds += seconds
                        current_task = task
                except:
                    continue
        last_action_time = time.time()
        print(f"{Fore.YELLOW}–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ –ª–æ–≥–∞: {len(session_log)} –∑–∞–ø–∏—Å–µ–π{Style.RESET_ALL}")
    else:
        # –ï—Å–ª–∏ –ª–æ–≥–∞ –Ω–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º log_start_time –Ω–∞ –º–æ–º–µ–Ω—Ç –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        log_start_time = time.time()

def log_action(task):
    global last_action_time, total_seconds, current_task

    now = time.time()
    timestamp = datetime.datetime.now().strftime("%H:%M:%S")

    if current_task and last_action_time:
        duration = now - last_action_time
        total_seconds += duration
        session_log.append((timestamp, current_task, int(duration)))
        with open(log_txt_path, "a", encoding="utf-8") as f:
            f.write(f"[{timestamp}] {current_task} | {int(duration)} —Å–µ–∫\n")

    current_task = task
    last_action_time = now
    if task == "–ù–∞—á–∞–ª–æ –¥–Ω—è" or not session_log:
        with open(log_txt_path, "a", encoding="utf-8") as f:
            f.write(f"[{timestamp}] –ù–∞—á–∞–ª–æ –¥–Ω—è\n")

def get_unique_xlsx_path():
    base_path = os.path.join(SCRIPT_DIR, f"{today}")
    version = 1
    while os.path.exists(f"{base_path}_ver{version}.xlsx"):
        version += 1
    return f"{base_path}_ver{version}.xlsx" if version > 1 else f"{base_path}.xlsx"

def export_to_excel():
    wb = Workbook()
    ws = wb.active
    ws.title = "Log"
    ws.append(["–í—Ä–µ–º—è", "–ó–∞–¥–∞—á–∞", "–°–µ–∫—É–Ω–¥—ã", "–ú–∏–Ω—É—Ç—ã", "–ß–∞—Å—ã"])

    for timestamp, task, seconds in session_log:
        minutes = seconds / 60
        hours = seconds / 3600
        ws.append([timestamp, task, seconds, round(minutes, 2), round(hours, 2)])

    final_path = get_unique_xlsx_path()
    try:
        wb.save(final_path)
        print(f"\nüìÑ Excel —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {final_path}")
    except PermissionError:
        print(f"{Fore.RED}‚ö† –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å {final_path}. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª –æ—Ç–∫—Ä—ã—Ç –≤ –¥—Ä—É–≥–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ. –ó–∞–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.{Style.RESET_ALL}")
    except Exception as e:
        print(f"{Fore.RED}‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ Excel: {e}{Style.RESET_ALL}")

def display_status():
    now = time.time()
    overall_time = format_timer(now - log_start_time) if log_start_time else "00:00:00"
    total_summary = format_totals(total_seconds)
    print(f"\r{Fore.WHITE}–°–µ–π—á–∞—Å: {Fore.GREEN}{current_task or '–ù–µ—Ç –∑–∞–¥–∞—á–∏'}{Style.RESET_ALL}"
          f"{Fore.CYAN} | {overall_time} | {Fore.YELLOW}{total_summary}{Style.RESET_ALL}")

def reset_program():
    global session_log, start_time, last_action_time, total_seconds, current_task, log_txt_path, log_xlsx_path, log_start_time
    session_log = []
    start_time = time.time()
    last_action_time = time.time()
    total_seconds = 0
    current_task = None
    log_start_time = time.time()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –ª–æ–≥–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç —Å–±—Ä–æ—Å–∞
    today_new = datetime.date.today().strftime("%Y-%m-%d")
    log_txt_path = os.path.join(SCRIPT_DIR, f"{today_new}.txt")
    log_xlsx_path = os.path.join(SCRIPT_DIR, f"{today_new}.xlsx")
    with open(log_txt_path, "w", encoding="utf-8") as f:
        f.write(f"[{datetime.datetime.now().strftime('%H:%M:%S')}] –ù–∞—á–∞–ª–æ –¥–Ω—è\n")
    print(f"{Fore.YELLOW}–°–±—Ä–æ—à–µ–Ω–æ! –ù–æ–≤—ã–π –ª–æ–≥: {log_txt_path}{Style.RESET_ALL}")

def main():
    global start_time, last_action_time, log_start_time, today, log_txt_path, log_xlsx_path

    start_time = time.time()
    recover_from_log()  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–≥ –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º log_start_time
    last_action_time = time.time()

    print(f"\nüìã –õ–æ–≥ {today}{Fore.GREEN}. –í–≤–æ–¥–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏. –î–ª—è –≤—ã—Ö–æ–¥–∞ ':exit', ':e', ':1', ':q', ':excel', ':end', "
          f"':—Å–±—Ä–æ—Å' –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –∏ –ª–æ–≥–∞, ':—Å–æ—Ö—Ä' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Excel.\n –ü—Ä–∏ –≤—ã—Ö–æ–¥–µ —ç–∫—Å–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è —Ä—è–¥–æ–º —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º.")

    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ–Ω—ã –¥–Ω—è
            current_day = datetime.date.today().strftime("%Y-%m-%d")
            if current_day != today:
                today = current_day
                reset_program()
                continue

            display_status()
            sys.stdout.write("> ")
            sys.stdout.flush()
            task = input().strip()
            if task == "":
                continue
            if task.lower() in [":exit", ":e", ":1", ":q", ":excel", ":end"]:
                log_action("–ö–æ–Ω–µ—Ü –¥–Ω—è")
                export_to_excel()
                break
            if task.lower() == ":—Å–±—Ä–æ—Å":
                reset_program()
                continue
            if task.lower() == ":—Å–æ—Ö—Ä":
                log_action(current_task or "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ")
                export_to_excel()
                continue
            log_action(task)
        except KeyboardInterrupt:
            now = time.time()
            overall_time = format_timer(now - log_start_time) if log_start_time else "00:00:00"
            print(f"\n{Fore.MAGENTA}–í—Ä–µ–º—è —Å –Ω–∞—á–∞–ª–∞ –ª–æ–≥–∞: {overall_time}{Style.RESET_ALL}")
            print("\nüö™ –ò—Å–ø–æ–ª—å–∑—É–π ':exit', ':e', ':1', ':q', ':excel', ':end' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, "
                  "':—Å–±—Ä–æ—Å' –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –∏ –ª–æ–≥–∞, ':—Å–æ—Ö—Ä' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Excel.")
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()